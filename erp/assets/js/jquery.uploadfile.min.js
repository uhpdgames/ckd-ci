/*!
 * jQuery Upload File Plugin
 * version: 3.0.1
 * @requires jQuery v1.5 or later & form plugin
 * Copyright (c) 2013 Ravishanker Kusuma
 * http://hayageek.com/
 */ (function(b) {
    if (b.fn.ajaxForm == undefined) {
        b.getScript("assets/js/jquery.form.js")
    }
    var a = {};
    a.fileapi = b("<input type='file'/>").get(0).files !== undefined;
    a.formdata = window.FormData !== undefined;
    b.fn.uploadFile = function(r) {
        var q = b.extend({
            url: "",
            method: "POST",
            enctype: "multipart/form-data",
            formData: null,
            returnType: null,
            allowedTypes: "*",
            fileName: "file",
            formData: {},
            dynamicFormData: function() {
                return {}
            },
            maxFileSize: -1,
            multiple: true,
            dragDrop: true,
            autoSubmit: true,
            showCancel: true,
            showAbort: true,
            showDone: true,
            showError: true,
            showStatusAfterSuccess: true,
            showStatusAfterError: true,
            onSubmit: function(s, t) {},
            onSuccess: function(t, s, u) {},
            onError: function(u, s, t) {},
            afterUploadAll: false,
            uploadButtonClass: "ajax-file-upload",
            dragDropStr: "<span> Drag and drop files here</span>",
            abortStr: "",
            cancelStr: "",
            doneStr: "",
            multiDragErrorStr: "Các file thả vào không cho phép.",
            extErrorStr: "không cho phép. Cho phép định dạng: ",
            sizeErrorStr: "không cho phép. Kích thước cho phép: ",
            uploadErrorStr: "Ảnh đã upload!"
        }, r);
        this.fileCounter = 1;
        this.fCounter = 0;
        this.sCounter = 0;
        this.tCounter = 0;
        var d = "ajax-file-upload-" + (new Date().getTime());
        this.formGroup = d;
        this.hide();
        this.errorLog = b("<div></div>");
        this.after(this.errorLog);
        this.responses = [];
        if (!a.formdata) {
            q.dragDrop = false
        }
        var l = this;
        var e = b('<button type="button">' + b(this).html() + "</button>");
        b(e).addClass(q.uploadButtonClass);
        (function j() {
            if (b.fn.ajaxForm) {
                if (q.dragDrop) {
                    var s = b('<div class="ajax-upload-dragdrop"></div>');
                    b(l).before(s);
                    b(s).append(e);
                    b(s).append(b(q.dragDropStr));
                    f(l, q, s)
                } else {
                    b(l).before(e)
                }
                p(l, d, q, e)
            } else {
                window.setTimeout(j, 10)
            }
        })();
        this.startUpload = function() {
            b("." + this.formGroup).each(function(t, s) {
                if (b(this).is("form")) {
                    b(this).submit()
                }
            })
        };
        this.stopUpload = function() {
            b(".ajax-file-upload-red").each(function(t, s) {
                if (b(this).hasClass(l.formGroup)) {
                    b(this).click()
                }
            })
        };
        this.getResponses = function() {
            return this.responses
        };
        var g = false;

        function i() {
            if (q.afterUploadAll && !g) {
                g = true;
                (function s() {
                    if (l.sCounter != 0 && (l.sCounter + l.fCounter == l.tCounter)) {
                        q.afterUploadAll(l);
                        g = false
                    } else {
                        window.setTimeout(s, 100)
                    }
                })()
            }
        }
        function f(v, t, u) {
            u.on("dragenter", function(s) {
                s.stopPropagation();
                s.preventDefault();
            });
            u.on("dragover", function(s) {
                s.stopPropagation();
                s.preventDefault()
            });
            u.on("drop", function(w) {
                w.preventDefault();
                v.errorLog.html("");
                var s = w.originalEvent.dataTransfer.files;
                if (!t.multiple && s.length > 1) {
                    if (t.showError) {
                        showNoti(t.multiDragErrorStr, 'Lỗi thao tác', "Err");
                    }
                    return
                }
                k(t, v, s)
            });
            b(document).on("dragenter", function(s) {
                s.stopPropagation();
                s.preventDefault()
            });
            b(document).on("dragover", function(s) {
                s.stopPropagation();
                s.preventDefault();
            });
            b(document).on("drop", function(s) {
                s.stopPropagation();
                s.preventDefault();
            })
        }
        function h(s) {
            var u = "";
            var t = s / 1024;
            if (parseInt(t) > 1024) {
                var v = t / 1024;
                u = v.toFixed(2) + " MB"
            } else {
                u = t.toFixed(2) + " KB"
            }
            return u
        }
        function n(w) {
            var x = [];
            if (jQuery.type(w) == "string") {
                x = w.split("&")
            } else {
                x = b.param(w).split("&")
            }
            var t = x.length;
            var s = [];
            var v, u;
            for (v = 0; v < t; v++) {
                x[v] = x[v].replace(/\+/g, " ");
                u = x[v].split("=");
                s.push([decodeURIComponent(u[0]), decodeURIComponent(u[1])])
            }
            return s
        }
        function k(F, A, t) {
            for (var B = 0; B < t.length; B++) {
                if (!c(A, F, t[B].name)) {
                    if (F.showError) {
                        showNoti('Định dạng cho phép: ' + F.allowedTypes, 'Định dạng file không đúng', "Err");
                    }
                    continue
                }
                if (F.maxFileSize != -1 && t[B].size > F.maxFileSize) {
                    if (F.showError) {
                        showNoti('Dung lượng file cho phép: ' + h(F.maxFileSize), 'Dung lượng file quá lớn', "Err");
                    }
                    continue
                }
                var C = F;
                var v = new FormData();
                var z = F.fileName.replace("[]", "");
                v.append(z, t[B]);
                var x = F.formData;
                if (x) {
                    var E = n(x);
                    for (var y = 0; y < E.length; y++) {
                        if (E[y]) {
                            v.append(E[y][0], E[y][1])
                        }
                    }
                }
                C.fileData = v;
                var D = new o(A, F);
                D.filename.html(A.fileCounter + "). " + t[B].name);
                var u = b("<form style='display:block; position:absolute;left: 150px;' class='" + A.formGroup + "' method='" + F.method + "' action='" + F.url + "' enctype='" + F.enctype + "'></form>");
                u.appendTo("body");
                var w = [];
                w.push(t[B].name);
                m(u, C, D, w, A);
                A.fileCounter++
            }
        }
        function c(v, u, x) {
            var w = u.allowedTypes.toLowerCase().split(",");
            var t = x.split(".").pop().toLowerCase();
            if (u.allowedTypes != "*" && jQuery.inArray(t, w) < 0) {
                return false
            }
            return true
        }
        function p(z, y, v, t) {
            var A = "ajax-upload-id-" + (new Date().getTime());
            var x = b("<form method='" + v.method + "' action='" + v.url + "' enctype='" + v.enctype + "'></form>");
            var u = "<input type='file' id='" + A + "' name='" + v.fileName + "'/>";
            if (v.multiple) {
                if (v.fileName.indexOf("[]") != v.fileName.length - 2) {
                    v.fileName += "[]"
                }
                u = "<input type='file' id='" + A + "' name='" + v.fileName + "' multiple/>"
            }
            var w = b(u).appendTo(x);
            w.change(function() {
                z.errorLog.html("");
                var G = v.allowedTypes.toLowerCase().split(",");
                var C = [];
                if (this.files) {
                    for (D = 0; D < this.files.length; D++) {
                        C.push(this.files[D].name)
                    }
                } else {
                    var E = b(this).val();
                    C.push(E);
                    if (!c(z, v, E)) {
                        if (v.showError) {
                            b("<div><font color='red'><b>" + E + "</b> " + v.extErrorStr + v.allowedTypes + "</font></div>").appendTo(z.errorLog)
                        }
                        return
                    }
                }
                t.unbind("click");
                p(z, y, v, t);
                x.addClass(y);
                if (a.fileapi && a.formdata) {
                    x.removeClass(y);
                    var F = this.files;
                    k(v, z, F)
                } else {
                    var B = "";
                    for (var D = 0; D < C.length; D++) {
                        B += z.fileCounter + "). " + C[D] + "<br>";
                        z.fileCounter++
                    }
                    var s = new o(z, v);
                    s.filename.html(B);
                    m(x, v, s, C, z)
                }
            });
            x.css({
                margin: 0,
                padding: 0,
                display: "block",
                position: "absolute",
                left: "-550px"
            });
            x.appendTo("body");
            if (navigator.appVersion.indexOf("MSIE ") != -1) {
                t.attr("for", A)
            } else {
                t.click(function() {
                    w.click()
                })
            }
        }
        function o(u, t) {
            this.statusbar = b("<div class='ajax-file-upload-statusbar'></div>");
            this.filename = b("<div class='ajax-file-upload-filename'></div>").appendTo(this.statusbar);
            this.progressDiv = b("<div class='ajax-file-upload-progress'>").appendTo(this.statusbar).hide();
            this.progressbar = b("<div class='ajax-file-upload-bar " + u.formGroup + "'></div>").appendTo(this.progressDiv);
            this.abort = b("<button class='submitBtn btn btn-danger " + u.formGroup + "'><i class='icon glyphicons white remove'></i>" + t.abortStr + "</button>").appendTo(this.statusbar).hide();
            this.cancel = b("<button class='submitBtn btn btn-danger'><i class='icon glyphicons white remove_2'></i>" + t.cancelStr + "</button>").appendTo(this.statusbar).hide();
            this.done = b("<button class='submitBtn btn btn-success'><i class='icon glyphicons white ok_2'></i>" + t.doneStr + "</button>").appendTo(this.statusbar).hide();
            u.errorLog.after(this.statusbar);
            return this
        }
        function m(y, x, t, v, z) {
            var w = null;
            var u = {
                cache: false,
                contentType: false,
                processData: false,
                forceSync: false,
                data: x.formData,
                formData: x.fileData,
                dataType: x.returnType,
                beforeSubmit: function(E, B, D) {
                    if (x.onSubmit.call(this, v) != false) {
                        var A = x.dynamicFormData();
                        if (A) {
                            var s = n(A);
                            if (s) {
                                for (var C = 0; C < s.length; C++) {
                                    if (s[C]) {
                                        if (x.fileData != undefined) {
                                            D.formData.append(s[C][0], s[C][1])
                                        } else {
                                            D.data[s[C][0]] = s[C][1]
                                        }
                                    }
                                }
                            }
                        }
                        z.tCounter += v.length;
                        window.setTimeout(i, 1000);
                        return true
                    }
                    t.statusbar.append("<div style='position: absolute; right: 0px; top: 8px;'><font color='red'>" + x.uploadErrorStr + "</font></div>");
                    t.cancel.show();
                    y.remove();
                    t.cancel.click(function() {
                        t.statusbar.remove()
                    });
                    return false
                },
                beforeSend: function(A, s) {
                    t.progressDiv.show();
                    t.cancel.hide();
                    t.done.hide();
                    if (x.showAbort) {
                        t.abort.show();
                        t.abort.click(function() {
                            A.abort()
                        })
                    }
                    if (!a.formdata) {
                        t.progressbar.width("5%")
                    } else {
                        t.progressbar.width("1%")
                    }
                },
                uploadProgress: function(D, s, C, B) {
                    var A = B + "%";
                    if (B > 1) {
                        t.progressbar.width(A)
                    }
                },
                success: function(A, s, B) {
                    z.responses.push(A);
                    t.progressbar.width("100%");
                    t.abort.hide();
                    x.onSuccess.call(this, v, A, B);
                    if (x.showStatusAfterSuccess) {
                        if (x.showDone) {
                            t.done.show();
                            t.done.click(function() {
                                t.statusbar.hide("slow");
                                t.statusbar.remove()
                            })
                        } else {
                            t.done.hide()
                        }
                    } else {
                        t.statusbar.hide("slow");
                        t.statusbar.remove()
                    }
                    y.remove();
                    z.sCounter += v.length
                },
                error: function(B, s, A) {
                    t.abort.hide();
                    if (B.statusText == "abort") {
                        t.statusbar.hide("slow")
                    } else {
                        x.onError.call(this, v, s, A);
                        if (x.showStatusAfterError) {
                            t.progressDiv.hide();
                            t.statusbar.append("<div class='ajax-file-upload-error'><font color='red'>LỖI UPLOAD: " + A + "</font></div>")
                        } else {
                            t.statusbar.hide();
                            t.statusbar.remove()
                        }
                    }
                    y.remove();
                    z.fCounter += v.length
                }
            };
            if (x.autoSubmit) {
                y.ajaxSubmit(u)
            } else {
                if (x.showCancel) {
                    t.cancel.show();
                    t.cancel.click(function() {
                        y.remove();
                        t.statusbar.remove()
                    })
                }
                y.ajaxForm(u)
            }
        }
        return this
    }
}(jQuery));